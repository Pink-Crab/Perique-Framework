Escaped mutants:
================

1) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:268    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @return self
      * @throws App_Initialization_Exception (code 9)
      */
-    protected function finalise() : self
+    private function finalise() : self
     {
         // Bind self to container.
         self::$container->addRule('*', array('substitutions' => array(self::class => $this, DI_Container::class => self::$container, \wpdb::class => $GLOBALS['wpdb'])));


2) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:274    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     protected function finalise() : self
     {
         // Bind self to container.
-        self::$container->addRule('*', array('substitutions' => array(self::class => $this, DI_Container::class => self::$container, \wpdb::class => $GLOBALS['wpdb'])));
+        self::$container->addRule('*', array('substitutions' => array(DI_Container::class => self::$container, \wpdb::class => $GLOBALS['wpdb'])));
         self::$container->addRule(App_Config::class, array('constructParams' => array(self::$app_config->export_settings())));
         // Allow the passing of DI Container via interface and method injection.
         self::$container->addRule(Inject_DI_Container::class, array('call' => array(array('set_di_container', array(self::$container)))));


3) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:306    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // Allow the passing of DI Container via interface and method injection.
         self::$container->addRule(Inject_DI_Container::class, array('call' => array(array('set_di_container', array(self::$container)))));
         // Allow the passing of Hook Loader via interface and method injection.
-        self::$container->addRule(Inject_Hook_Loader::class, array('call' => array(array('set_hook_loader', array($this->loader)))));
+        self::$container->addRule(Inject_Hook_Loader::class, array('call' => array(array('set_hook_loader', array()))));
         // Allow the passing of App Config via interface and method injection.
         self::$container->addRule(Inject_App_Config::class, array('call' => array(array('set_app_config', array(self::$app_config)))));
         // Process middleware classnames.


4) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:316    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         // Allow the passing of Hook Loader via interface and method injection.
         self::$container->addRule(Inject_Hook_Loader::class, array('call' => array(array('set_hook_loader', array($this->loader)))));
         // Allow the passing of App Config via interface and method injection.
-        self::$container->addRule(Inject_App_Config::class, array('call' => array(array('set_app_config', array(self::$app_config)))));
+        self::$container->addRule(Inject_App_Config::class, array('call' => array(array('set_app_config', array()))));
         // Process middleware classnames.
         foreach ($this->middleware_class_names as $class_name) {
             $middleware = self::$container->create($class_name);


5) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:332    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
             }
             $this->registration_middleware($middleware);
         }
-        /** @hook{string, App_Config, Loader, DI_Container} */
-        do_action(Hooks::APP_INIT_PRE_BOOT, self::$app_config, $this->loader, self::$container);
+        
         // phpcs:disable WordPress.NamingConventions.ValidHookName.*
         // Initialise on init
         add_action('init', function () {


6) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:338    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
         // phpcs:disable WordPress.NamingConventions.ValidHookName.*
         // Initialise on init
         add_action('init', function () {
-            do_action(Hooks::APP_INIT_PRE_REGISTRATION, self::$app_config, $this->loader, self::$container);
+            
             $this->registration->process();
             do_action(Hooks::APP_INIT_POST_REGISTRATION, self::$app_config, $this->loader, self::$container);
             $this->loader->register_hooks();


7) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:343    [M] DecrementInteger

--- Original
+++ New
@@ @@
             do_action(Hooks::APP_INIT_POST_REGISTRATION, self::$app_config, $this->loader, self::$container);
             $this->loader->register_hooks();
             // @phpstan-ignore-line, if loader is not defined, exception will be thrown above
-        }, 1);
+        }, 0);
         return $this;
     }
     // Magic Helpers.


8) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App.php:343    [M] IncrementInteger

--- Original
+++ New
@@ @@
             do_action(Hooks::APP_INIT_POST_REGISTRATION, self::$app_config, $this->loader, self::$container);
             $this->loader->register_hooks();
             // @phpstan-ignore-line, if loader is not defined, exception will be thrown above
-        }, 1);
+        }, 2);
         return $this;
     }
     // Magic Helpers.


9) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:287    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @param array<string, array<string,string>> $meta
      * @return void
      */
-    public function set_meta(array $meta) : void
+    protected function set_meta(array $meta) : void
     {
         $valid_meta_types = array(self::POST_META, self::USER_META, self::TERM_META);
         foreach ($meta as $meta_type => $pairs) {


10) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:345    [M] DecrementInteger

--- Original
+++ New
@@ @@
      */
     private function settings_defaults() : array
     {
-        $base_path = \dirname(__DIR__, 2);
+        $base_path = \dirname(__DIR__, 1);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
         return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());


11) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:345    [M] IncrementInteger

--- Original
+++ New
@@ @@
      */
     private function settings_defaults() : array
     {
-        $base_path = \dirname(__DIR__, 2);
+        $base_path = \dirname(__DIR__, 3);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
         return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());


12) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:353    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


13) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:355    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


14) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:355    [M] Concat

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => '/views' . $base_path, 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


15) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:356    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


16) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:356    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path, 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


17) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:356    [M] Concat

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => '/assets' . $base_path, 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


18) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:360    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


19) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:361    [M] ArrayItem

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' > plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


20) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:362    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


21) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:363    [M] Concat

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => '/assets' . plugins_url($plugin_dir), 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


22) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:363    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


23) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:363    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir), 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


24) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:369    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $base_path = \dirname(__DIR__, 2);
         $plugin_dir = \basename($base_path);
         $wp_uploads = \wp_upload_dir();
-        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::POST_META => array(), self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
+        return array('plugin' => array('version' => '0.1.0'), 'path' => array('plugin' => $base_path, 'view' => $base_path . '/views', 'assets' => $base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url($plugin_dir), 'view' => plugins_url($plugin_dir) . '/views', 'assets' => plugins_url($plugin_dir) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']), 'post_types' => array(), 'taxonomies' => array(), 'meta' => array(self::USER_META => array(), self::TERM_META => array()), 'db_tables' => array(), 'namespaces' => array('rest' => 'pinkcrab', 'cache' => 'pc_cache'), 'additional' => array());
     }
     /**
      * Filters an array to ensure key and value are both valid strings.


25) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:395    [M] MBString

--- Original
+++ New
@@ @@
     {
         /** @var array<string, string> (as per filter function)*/
         return array_filter($pairs, function ($value, $key) : bool {
-            return is_string($value) && \mb_strlen($value) > 0 && is_string($key);
+            return is_string($value) && strlen($value) > 0 && is_string($key);
         }, ARRAY_FILTER_USE_BOTH);
     }
     /**


26) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:395    [M] GreaterThan

--- Original
+++ New
@@ @@
     {
         /** @var array<string, string> (as per filter function)*/
         return array_filter($pairs, function ($value, $key) : bool {
-            return is_string($value) && \mb_strlen($value) > 0 && is_string($key);
+            return is_string($value) && \mb_strlen($value) >= 0 && is_string($key);
         }, ARRAY_FILTER_USE_BOTH);
     }
     /**


27) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Config.php:412    [M] ArrayItem

--- Original
+++ New
@@ @@
      */
     public function export_settings() : array
     {
-        return array('path' => $this->paths['path'], 'url' => $this->paths['url'], 'namespaces' => $this->namespaces, 'plugin' => $this->plugin, 'additional' => $this->additional, 'db_tables' => $this->db_tables, 'post_types' => $this->post_types, 'taxonomies' => $this->taxonomies, 'meta' => $this->meta);
+        return array('path' => $this->paths['path'], 'url' => $this->paths['url'], 'namespaces' => $this->namespaces, 'plugin' > $this->plugin, 'additional' => $this->additional, 'db_tables' => $this->db_tables, 'post_types' => $this->post_types, 'taxonomies' => $this->taxonomies, 'meta' => $this->meta);
     }
 }


28) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:48    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if (null === $base_path) {
             $trace = debug_backtrace();
             //phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_debug_backtrace
-            $this->base_path = isset($trace[0]['file']) ? \trailingslashit(dirname($trace[0]['file'])) : __DIR__;
+            $this->base_path = isset($trace[1]['file']) ? \trailingslashit(dirname($trace[0]['file'])) : __DIR__;
         } else {
             $this->base_path = \trailingslashit($base_path);
         }


29) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:64    [M] FalseValue

--- Original
+++ New
@@ @@
      *
      * @return self
      */
-    public function with_wp_dice(bool $include_default_rules = false) : self
+    public function with_wp_dice(bool $include_default_rules = true) : self
     {
         $loader = new Hook_Loader();
         // Setup DI Container


30) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:93    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      *
      * @return array<mixed>
      */
-    protected function default_di_rules() : array
+    private function default_di_rules() : array
     {
         return array('*' => array('substitutions' => array(Renderable::class => new PHP_Engine($this->base_path))));
     }


31) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:136    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
      */
     public function app_config(array $app_config) : self
     {
-        $this->app->set_app_config(array_merge($this->default_config_paths(), $app_config));
+        $this->app->set_app_config($app_config);
         return $this;
     }
     /**


32) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:188    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => $this->base_path, 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


33) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:189    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


34) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:189    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


35) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:189    [M] Concat

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => '/views' . rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


36) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:189    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => $this->base_path . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


37) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:190    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => $this->base_path . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


38) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:190    [M] Concat

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => '/assets' . rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


39) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:190    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


40) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:190    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


41) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:194    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


42) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:195    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => plugins_url(basename($this->base_path)), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


43) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:195    [M] ArrayItem

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' > rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


44) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:196    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


45) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:196    [M] Concat

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => '/views' . rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


46) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:196    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


47) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:196    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => plugins_url(basename($this->base_path)) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


48) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:197    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => plugins_url(basename($this->base_path)) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


49) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:197    [M] Concat

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => '/assets' . rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


50) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:197    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


51) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Factory.php:197    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     private function default_config_paths() : array
     {
         $wp_uploads = \wp_upload_dir();
-        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
+        return array('path' => array('plugin' => rtrim($this->base_path, \DIRECTORY_SEPARATOR), 'view' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim($this->base_path, \DIRECTORY_SEPARATOR) . '/assets', 'upload_root' => $wp_uploads['basedir'], 'upload_current' => $wp_uploads['path']), 'url' => array('plugin' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'view' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR) . '/views', 'assets' => rtrim(plugins_url(basename($this->base_path)), \DIRECTORY_SEPARATOR), 'upload_root' => $wp_uploads['baseurl'], 'upload_current' => $wp_uploads['url']));
     }
     /**
      * Add registration middleware


52) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Validation.php:67    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      *
      * @return void
      */
-    protected function validate_properties_set() : void
+    private function validate_properties_set() : void
     {
         foreach ($this->required_properties as $property => $is_static) {
             $property_reflection = new ReflectionProperty($this->app, $property);


53) /shared/httpd/php/htdocs/Perqiue-Framework/src/Application/App_Validation.php:82    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      *
      * @return void
      */
-    protected function already_booted() : void
+    private function already_booted() : void
     {
         if ($this->app->is_booted() === true) {
             $this->errors[] = self::ERROR_MESSAGE_APP_BOOTED;


54) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/Dice/PinkCrab_Dice.php:69    [M] DecrementInteger

--- Original
+++ New
@@ @@
     public function get($id)
     {
         if (!$this->has($id)) {
-            throw new DI_Container_Exception("{$id} not defined in container", 1);
+            throw new DI_Container_Exception("{$id} not defined in container", 0);
         }
         return $this->create($id);
     }


55) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/Dice/PinkCrab_Dice.php:69    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function get($id)
     {
         if (!$this->has($id)) {
-            throw new DI_Container_Exception("{$id} not defined in container", 1);
+            throw new DI_Container_Exception("{$id} not defined in container", 2);
         }
         return $this->create($id);
     }


56) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/Registration/Registration_Service.php:133    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 $middleware->set_di_container($this->di_container);
             }
             // Set the hook loader if requested.
-            if (is_object($middleware) && \method_exists($middleware, 'set_hook_loader') && !is_null($this->loader)) {
+            if ((is_object($middleware) || \method_exists($middleware, 'set_hook_loader')) && !is_null($this->loader)) {
                 $middleware->set_hook_loader($this->loader);
             }
             // Run middleware setup


57) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/Component/Component_Compiler.php:99    [M] UnwrapStrReplace

--- Original
+++ New
@@ @@
         $short_name = $reflect->getShortName();
         // Add space between capitals, make lowercase and replace underscores with dashes.
         $short_name = strtolower(preg_replace('/(?<!^)[A-Z]/', '-$0', $short_name) ?? '');
-        $short_name = str_replace('_', '-', $short_name);
+        $short_name = $short_name;
         return \trailingslashit($this->component_base_path) . $short_name;
     }
     /**


58) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/Component/Component_Compiler.php:121    [M] FalseValue

--- Original
+++ New
@@ @@
             return null;
         }
         // If comment contains the annotation, return the value.
-        return strpos($comment, "@{$annotation}") !== false ? $this->extract_annotation_value($comment, $annotation) : null;
+        return strpos($comment, "@{$annotation}") !== true ? $this->extract_annotation_value($comment, $annotation) : null;
     }
     /**
      * Extracts the value from the annotation.


59) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/Component/Component_Compiler.php:136    [M] Coalesce

--- Original
+++ New
@@ @@
     {
         $pattern = "/@{$annotation}\\s+(.*)/";
         preg_match($pattern, $comment, $matches);
-        return $matches[1] ?? null;
+        return null ?? $matches[1];
     }
 }


60) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:101    [M] UnwrapLtrim

--- Original
+++ New
@@ @@
         // Compile the component.
         $compiled = $this->component_compiler->compile($component);
         $template = $this->maybe_resolve_dot_notation($compiled->template());
-        $view = sprintf('%s%s.php', \DIRECTORY_SEPARATOR, ltrim($template));
+        $view = sprintf('%s%s.php', \DIRECTORY_SEPARATOR, $template);
         if ($print) {
             print $this->render_buffer($view, $compiled->data());
             // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped


61) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:116    [M] TrueValue

--- Original
+++ New
@@ @@
      * @param View_Model $view_model
      * @return string|void
      */
-    public function view_model(View_Model $view_model, bool $print = true)
+    public function view_model(View_Model $view_model, bool $print = false)
     {
         return $this->render($view_model->template(), $view_model->data(), $print);
     }


62) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:128    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @param bool $print
      * @return string|void
      */
-    public function partial(string $view, iterable $data = array(), bool $print = true)
+    protected function partial(string $view, iterable $data = array(), bool $print = true)
     {
         if ($print) {
             $this->render($view, $data, $print);


63) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:128    [M] TrueValue

--- Original
+++ New
@@ @@
      * @param bool $print
      * @return string|void
      */
-    public function partial(string $view, iterable $data = array(), bool $print = true)
+    public function partial(string $view, iterable $data = array(), bool $print = false)
     {
         if ($print) {
             $this->render($view, $data, $print);


64) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:144    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @return string
      * @throws Exception
      */
-    protected function render_buffer(string $view, iterable $__data) : string
+    private function render_buffer(string $view, iterable $__data) : string
     {
         if (!file_exists($view)) {
             throw new Exception("{$view} doesn't exist");


65) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:178    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @param string $filename
      * @return string
      */
-    protected function resolve_file_path(string $filename) : string
+    private function resolve_file_path(string $filename) : string
     {
         $filename = $this->maybe_resolve_dot_notation($filename);
         return sprintf('%s%s.php', $this->base_view_path, ltrim($filename));


66) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:183    [M] UnwrapLtrim

--- Original
+++ New
@@ @@
     protected function resolve_file_path(string $filename) : string
     {
         $filename = $this->maybe_resolve_dot_notation($filename);
-        return sprintf('%s%s.php', $this->base_view_path, ltrim($filename));
+        return sprintf('%s%s.php', $this->base_view_path, $filename);
     }
     /**
      * Replaces dots with directory separator based on OS from $filename


67) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:193    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @param string $filename
      * @return string
      */
-    protected function maybe_resolve_dot_notation(string $filename) : string
+    private function maybe_resolve_dot_notation(string $filename) : string
     {
         if ($this->str_ends_with('.php', $filename)) {
             $filename = substr($filename, 0, -4);


68) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:211    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @param string $haystack
      * @return bool
      */
-    protected function str_ends_with(string $needle, string $haystack) : bool
+    private function str_ends_with(string $needle, string $haystack) : bool
     {
         $needle_len = strlen($needle);
         return $needle_len === 0 || 0 === substr_compare($haystack, $needle, -$needle_len);


69) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:213    [M] DecrementInteger

--- Original
+++ New
@@ @@
     protected function str_ends_with(string $needle, string $haystack) : bool
     {
         $needle_len = strlen($needle);
-        return $needle_len === 0 || 0 === substr_compare($haystack, $needle, -$needle_len);
+        return $needle_len === -1 || 0 === substr_compare($haystack, $needle, -$needle_len);
     }
     /**
      * Verifies the view path exists and it has the trailing slash.


70) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:224    [M] ProtectedVisibility

--- Original
+++ New
@@ @@
      * @return string
      * @throws Exception
      */
-    protected function verify_view_path(string $path) : string
+    private function verify_view_path(string $path) : string
     {
         $path = $this->maybe_resolve_dot_notation($path);
         $path = rtrim($path, '/') . '/';


71) /shared/httpd/php/htdocs/Perqiue-Framework/src/Services/View/PHP_Engine.php:226    [M] UnwrapRtrim

--- Original
+++ New
@@ @@
     protected function verify_view_path(string $path) : string
     {
         $path = $this->maybe_resolve_dot_notation($path);
-        $path = rtrim($path, '/') . '/';
+        $path = $path . '/';
         if (!\is_dir($path)) {
             throw new Exception("{$path} doesn't exist and cant be used as the base view path.");
         }


Timed Out mutants:
==================

Skipped mutants:
================

Not Covered mutants:
====================
